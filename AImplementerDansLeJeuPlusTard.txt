//initialise les decks
	public void initCartes()
	{
		//Creation des cartes wagon

		this.lstCartesWagon = new ArrayList<CarteWagon>();

		while ( this.nbCarteLocomotive-- > 0 )
			this.lstCartesWagon.add(new CarteWagon(null, this.imageVersoCouleur, this.imageRectoLocomotive));
		
		for ( int cpt = 0; cpt < this.lstCouleurs.size(); cpt++ )
		{
			int nbCarte = 0;
			while ( nbCarte < this.nbCarteCoul )
			{
				this.lstCartesWagon.add(new CarteWagon(this.lstCouleurs.get(cpt), this.imageVersoCouleur, this.lstImagesRectoCouleur.get(cpt)));
				nbCarte++;
			}
		}
		Collections.shuffle(this.lstCartesWagon);

		
		this.lstDefausseCartesWagon = new ArrayList<CarteWagon>();
		
		this.tabCarteWagon = new CarteWagon[TAILLE_TAB_WAGON];
		this.tabCarteObjectif = new CarteObjectif[TAILLE_TAB_OBJECTIF];

		for (int cpt = 0; cpt < this.tabCarteWagon.length; cpt++)
			this.tabCarteWagon[cpt] = this.lstCartesWagon.remove(0);
	}
	
	//Permet de choisir parmi les trois cartes objectifs
	public void piocherTabObjectif (boolean[] tabBool, String nomJoueur)
	{
		int cptJoueur = 0;
		for ( Joueur joueur : this.lstJoueurs )
		{
			if ( nomJoueur == joueur.getNom()  )
			{
				for ( int cpt = 0; cpt < tabBool.length; cpt++ )
				{
					if ( tabBool[cpt] == true )
					{
						this.lstJoueurs.get(cptJoueur).ajouterCarteObjectif(this.tabCarteObjectif[cpt]);
					}
					else
					{
						this.lstCartesObjectif.add(this.tabCarteObjectif[cpt]);
					}
				}
			}
			cptJoueur++;
		}
	}

	//Permet de choisir parmi les 5 cartes wagons
	public void piocherTabWagon (int indiceTab, String nomJoueur)
	{
		int cptWagon = 0;

		for ( Joueur joueur : this.lstJoueurs )
		{
			if ( nomJoueur == joueur.getNom()  )
			{
				//if ( this.lstJoueurs.get(cptWagon).aJouer() && this.tabCarteWagon[indiceTab].isJoker() )	//Creer un attribut dans joueur qui indique si il joue ou pas
					//le joueur ne peut plus piocher

				this.lstJoueurs.get(cptWagon).ajouterCarteWagon(this.tabCarteWagon[indiceTab]);
				if ( this.tabCarteWagon[indiceTab].isJoker() )
					//le joueur ne peut plus piocher

				this.tabCarteWagon[indiceTab] = this.lstCartesWagon.remove(0);
			}
			cptWagon++;
		}
	}

	//Permet de piocher dans le deck de wagon, ou de piocher les trois cartes objectifs
	public void piocherDeck (char typeCarte, String nomJoueur)
	{
		switch(typeCarte)
		{
			case 'O':
					for (int cpt = 0; cpt < this.tabCarteObjectif.length; cpt++)
						this.tabCarteObjectif[cpt] = this.lstCartesObjectif.remove(0);
				break;
			
			case 'W': 
				if (this.lstCartesWagon.isEmpty())
				{
					Collections.shuffle(this.lstDefausseCartesWagon);
					this.lstCartesWagon = this.lstDefausseCartesWagon;
				}

				int cptWagon = 0;
				for ( Joueur joueur : this.lstJoueurs )
				{
					if ( nomJoueur == joueur.getNom()  )
					{
						this.lstJoueurs.get(cptWagon).ajouterCarteWagon(this.lstCartesWagon.get(0));
						this.lstDefausseCartesWagon.add(this.lstCartesWagon.remove(0));
					}
					cptWagon++;
				}
				break;
		}
	}